let mapleader = "\<Space>"
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>

vmap <Leader>y 17y
vmap <Leader>d 17d
nmap <Leader>p 17p
nmap <Leader>P 17P
vmap <Leader>p 17p
vmap <Leader>P 17P

" More accessible command line prompt
nmap , :

" Map C-s to save the file
noremap <silent> <C-S>          :update<CR>
vnoremap <silent> <C-S>         <C-C>:update<CR>
inoremap <silent> <C-S>         <C-O>:update<CR>

nmap <C-b> :CtrlPBuffer<CR>
map <C-n> :NERDTreeToggle<CR>

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
" command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :GrepperAg<SPACE>

" rspec-cucumber.vim mappings
map <Leader>t :call RunCurrentTestFile()<CR>
map <Leader>s :call RunNearestTest()<CR>
map <Leader>l :call RunLastTest()<CR>
map <Leader>a :call RunAllTests()<CR>

map ç :ccl <CR>
map <F2> :Copen <CR>

" Delete the current file
nnoremap <C-Del> :call delete(expand('%'))<CR>

" vim-surround mappings
let g:surround_no_mappings = 1
nmap ds  <Plug>Dsurround
nmap hs  <Plug>Csurround
nmap ys  <Plug>Ysurround
nmap yS  <Plug>YSurround
nmap yss <Plug>Yssurround
nmap ySs <Plug>YSsurround
nmap ySS <Plug>YSsurround
xmap S   <Plug>VSurround
xmap gS  <Plug>VgSurround
if !hasmapto("<Plug>Isurround","i") && "" == mapcheck("<C-S>","i")
  imap    <C-S> <Plug>Isurround
endif
imap      <C-G>s <Plug>Isurround
imap      <C-G>S <Plug>ISurround
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

" Kill the current buffer without closing the corresponding split
nnoremap <C-X> :BD<CR>

" More accessible (on bépo keyboard) Jump to Tag
nnoremap <C-J> <C-]> 

" CtrlP Mappings

let g:ctrlp_prompt_mappings = {
  \ 'PrtBS()':              ['<bs>', '<c-]>'],
  \ 'PrtDelete()':          ['<del>'],
  \ 'PrtDeleteWord()':      ['<c-w>'],
  \ 'PrtClear()':           ['<c-u>'],
  \ 'PrtSelectMove("j")':   ['<c-t>', '<down>'],
  \ 'PrtSelectMove("k")':   ['<c-s>', '<up>'],
  \ 'PrtSelectMove("t")':   ['<Home>', '<kHome>'],
  \ 'PrtSelectMove("b")':   ['<End>', '<kEnd>'],
  \ 'PrtSelectMove("u")':   ['<PageUp>', '<kPageUp>'],
  \ 'PrtSelectMove("d")':   ['<PageDown>', '<kPageDown>'],
  \ 'PrtHistory(-1)':       ['<c-n>'],
  \ 'PrtHistory(1)':        ['<c-p>'],
  \ 'AcceptSelection("e")': ['<cr>', '<2-LeftMouse>'],
  \ 'AcceptSelection("h")': ['<c-x>', '<c-cr>'],
  \ 'AcceptSelection("t")': ['<c-w>'],
  \ 'AcceptSelection("v")': ['<c-v>', '<RightMouse>'],
  \ 'ToggleFocus()':        ['<s-tab>'],
  \ 'ToggleRegex()':        ['<c-r>'],
  \ 'ToggleByFname()':      ['<c-d>'],
  \ 'ToggleType(1)':        ['<c-f>', '<c-up>'],
  \ 'ToggleType(-1)':       ['<c-b>', '<c-down>'],
  \ 'PrtExpandDir()':       ['<tab>'],
  \ 'PrtInsert("c")':       ['<MiddleMouse>', '<insert>'],
  \ 'PrtInsert()':          ['<c-\>'],
  \ 'PrtCurStart()':        ['<c-a>'],
  \ 'PrtCurEnd()':          ['<c-e>'],
  \ 'PrtCurLeft()':         ['<c-h>', '<left>', '<c-^>'],
  \ 'PrtCurRight()':        ['<c-l>', '<right>'],
  \ 'PrtClearCache()':      ['<F5>'],
  \ 'PrtDeleteEnt()':       ['<F7>'],
  \ 'CreateNewFile()':      ['<c-y>'],
  \ 'MarkToOpen()':         ['<c-z>'],
  \ 'OpenMulti()':          ['<c-o>'],
  \ 'PrtExit()':            ['<esc>', '<c-c>', '<c-g>'],
  \ }

nmap <leader>gf :execute 'edit ' . input('folder ? ') . '/' . expand('<cfile>')<cr>

" NERDTree Mapping

let g:NERDTreeMapJumpNextSibling = '<C-S>'
let g:NERDTreeMapJumpPrevSibling = '<C-T>'
let g:NERDTreeMapJumpFirstChild = 'S'
let g:NERDTreeMapJumpLastChild = 'T'
let g:NERDTreeMapOpenVSplit = 'v'
let g:NERDTreeMapOpenInTab = 'k'

nmap <Leader>n :NERDTreeFind<CR>
let g:AutoPairsShortcutToggle = 'C-E'


" always move cursor to the last line of yanked block
vmap y y`]

" EasyMotion mappings
map  <Leader>f <Plug>(easymotion-bd-f)
map  <Leader>w <Plug>(easymotion-bd-w)

" Gif config
map 9 <Plug>(easymotion-sn)
omap 9 <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

let g:UltiSnipsExpandTrigger="<c-t>"
let g:UltiSnipsJumpForwardTrigger = "<c-t>"
let g:UltiSnipsJumpBackwardTrigger = "<c-s>"

" Toggle Auto Pairs remapping
let g:AutoPairsShortcutToggle = '<C-K>'
