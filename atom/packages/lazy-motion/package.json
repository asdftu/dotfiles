{
  "_args": [
    [
      {
        "raw": "/private/var/folders/q1/ncmcgyrj6m78zg5m1_t_78hc0000gn/T/d-117229-96675-vbeiqr/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/q1/ncmcgyrj6m78zg5m1_t_78hc0000gn/T/d-117229-96675-vbeiqr/package.tgz",
        "spec": "/private/var/folders/q1/ncmcgyrj6m78zg5m1_t_78hc0000gn/T/d-117229-96675-vbeiqr/package.tgz",
        "type": "local"
      },
      "/private/var/folders/q1/ncmcgyrj6m78zg5m1_t_78hc0000gn/T/apm-install-dir-117229-96675-rkue1a"
    ]
  ],
  "_from": "../d-117229-96675-vbeiqr/package.tgz",
  "_id": "lazy-motion@0.7.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/lazy-motion",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/q1/ncmcgyrj6m78zg5m1_t_78hc0000gn/T/d-117229-96675-vbeiqr/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/q1/ncmcgyrj6m78zg5m1_t_78hc0000gn/T/d-117229-96675-vbeiqr/package.tgz",
    "spec": "/private/var/folders/q1/ncmcgyrj6m78zg5m1_t_78hc0000gn/T/d-117229-96675-vbeiqr/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-117229-96675-vbeiqr/package.tgz",
  "_shasum": "624ae07c45a1f8d0b96c6499003346520a739d43",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/q1/ncmcgyrj6m78zg5m1_t_78hc0000gn/T/d-117229-96675-vbeiqr/package.tgz",
  "_where": "/private/var/folders/q1/ncmcgyrj6m78zg5m1_t_78hc0000gn/T/apm-install-dir-117229-96675-rkue1a",
  "activationCommands": {
    "atom-text-editor": [
      "lazy-motion:forward",
      "lazy-motion:backward",
      "lazy-motion:forward-again",
      "lazy-motion:backward-again",
      "lazy-motion:forward-cursor-word",
      "lazy-motion:backward-cursor-word"
    ]
  },
  "bugs": {
    "url": "https://github.com/jrajav/atom-lazy-motion/issues"
  },
  "configSchema": {
    "wordRegExp": {
      "order": 2,
      "type": "string",
      "default": "[@\\w-.():?]+",
      "description": "Used to build candidate List"
    },
    "showHoverIndicator": {
      "order": 3,
      "type": "boolean",
      "default": true
    },
    "historySize": {
      "order": 4,
      "type": "integer",
      "minimum": 0,
      "default": 30
    },
    "saveHistoryOnCancel": {
      "order": 5,
      "type": "boolean",
      "default": true,
      "description": "If false, canceled search won't saved to history."
    },
    "clearSearchTextOnEverySearch": {
      "order": 6,
      "type": "boolean",
      "default": true,
      "description": "Search text is cleared on every search"
    },
    "showDeprecationWarning": {
      "order": 7,
      "type": "boolean",
      "default": true
    }
  },
  "dependencies": {
    "fuzzaldrin": "^2.1.0",
    "underscore-plus": "^1.6.6"
  },
  "description": "Rapid cursor positioning with fuzzy search",
  "devDependencies": {},
  "engines": {
    "atom": "^1.13.0"
  },
  "homepage": "https://github.com/jrajav/atom-lazy-motion#readme",
  "keywords": [],
  "license": "MIT",
  "main": "./lib/main",
  "name": "lazy-motion",
  "optionalDependencies": {},
  "readme": "# lazy-motion\n\nRapid cursor positioning with **fuzzy**, **lazy** search.\n\n![gif](https://raw.githubusercontent.com/t9md/t9md/3379ed41ea6fd3725245f5d37b3bb36f7e9b0683/img/atom-lazy-motion.gif)\n\n# Feature\n\n- Search word within buffer with fuzzy search by [fuzzaldrin](https://github.com/atom/fuzzaldrin).\n- Display `current / total` match count in input panel and hover indicator.\n- Incrementally scroll(visit) to matched position.\n- Don't change cursor position unless you confirm(important for [cursor-history](https://atom.io/packages/cursor-history) like pakcage).\n- Differentiate color for top(blue) and bottom(red) entry of matches.\n- Highlight original cursor position while searching and flash current matching.\n- Flash screen if no match.\n- Support search history, and set cursor word as search text.\n\n# How it works.\n\nLets say you are editing over 200 lines of CoffeeScript file.  \nAnd you want to go to line where code `@container?.destroy()` is to change it.  \n\nWith lazy-motion, you can reach target in following way.\n\n1. Invoke `lazy-motion:forward` from keymap.\n2. Input `c?d` to input panel.\n3. `core:confirm` to land or `core:cancel` to cancel.\n\n### Other examples\n\n- `ca)` to reach line containing `cancel()`.\n- `gemade` to reach line containing `@flashingDecoration?.getMarker().destroy()`.\n\nLike the example above you can reach target position with very lazy and fuzzy key type.\n\n# Why *label jump* approach not worked for me.\n\nUntil now I released [vim-smalls](https://github.com/t9md/vim-smalls/blob/master/README-JP.md) and its [Atom port](https://github.com/t9md/atom-smalls).  \n\nAnd also hacked [jumpy](https://github.com/t9md/jumpy) and [vim-easymotion](https://github.com/t9md/vim-easymotion) as exercise to create smalls.  \n\nBut as for me this *label jump* system not work, I couldn't adapt to it.  \n\nThe reason is simple.  \n\nThe *label jump* constrains me to enter label precisely which result in my concentration (or zone or flow) lost.  \n\nOf course this *label jump* packages let me reach target position with minimum key typing.  \nBut in my opinion, it's only good for demonstration.\n\nIn real world coding, the **brain context switch** the *label jump* enforces is **too expensive** to use on a daily basis.  \n\n# Commands\n\n### atom-text-editor\n\n- `lazy-motion:forward`: Search forward.\n- `lazy-motion:backward`: Search backward.\n- `lazy-motion:forward-again`: Search last word again.\n- `lazy-motion:backward-again`: Search last word again.\n- `lazy-motion:forward-cursor-word`: Search with cursor word.\n- `lazy-motion:backward-cursor-word`: Search with cursor word.\n\n### atom-text-editor.lazy-motion\n\n- `core:confirm`: Confirm.\n- `core:cancel`: Cancel.\n- `core:move-up`: Set previous history as search word.\n- `core:move-down`: Set next history as search word.\n- `lazy-motion:set-history-next`: Set next history as search word.\n- `lazy-motion:set-history-prev`: Set previous history as search word.\n- `lazy-motion:set-cursor-word`: Set cursor word as search word.\n\n*NOTE: Search always wrap from end-to-top or top-to-end.*\n\n# Configuration\n\n- `wordRegExp`: Used to build candidate word list. See [this](https://github.com/t9md/atom-lazy-motion/issues/3) for detail.\n- `showHoverIndicator`: Show hover indicator while searching.\n- `historySize`: Max length of history.\n- `saveHistoryOnCancel`: If false, canceled search won't saved to history.\n\n# Keymap\n\nNo keymap by default.  \nYou need to set your own keymap in `keymap.cson`.\n\n## Normal user\n\n```coffeescript\n'atom-text-editor':\n  'ctrl-s': 'lazy-motion:forward'\n  'ctrl-cmd-r': 'lazy-motion:backward'\n\n'atom-text-editor.lazy-motion':\n  ']': 'lazy-motion:forward'\n  '[': 'lazy-motion:backward'\n```\n\n## Emacs user\n\n```coffeescript\n'atom-text-editor':\n  'ctrl-s': 'lazy-motion:forward'\n  'ctrl-r': 'lazy-motion:backward'\n\n'.platform-darwin atom-text-editor.lazy-motion':\n  'ctrl-s': 'lazy-motion:forward'\n  'ctrl-r': 'lazy-motion:backward'\n  'ctrl-g': 'core:cancel'\n```\n\n## My setting\n\n```coffeescript\n'atom-text-editor.vim-mode-plus.normal-mode, atom-text-editor.vim-mode-plus.visual-mode':\n  's': 'lazy-motion:forward'\n  'ctrl-p': 'lazy-motion:forward-again'\n\n'atom-text-editor.lazy-motion':\n  ';': 'core:confirm'\n  ']': 'lazy-motion:forward'\n  '[': 'lazy-motion:backward'\n  'cmd-e': 'lazy-motion:set-cursor-word'\n```\n\n# Change Style\n\nStyle used in lazy-motion is defined in [main.less](https://github.com/t9md/atom-lazy-motion/blob/master/styles/main.less).  \nYou can change style bye overwriting these style in your `style.css`.  \n\ne.g.\n\n```less\natom-text-editor::shadow {\n  // Change border\n  .lazy-motion-match.current .region {\n    border-width: 2px;\n  }\n  // Change hover label\n  .lazy-motion-hover {\n    color: @text-color-selected;\n    background-color: @syntax-selection-color;\n    &.first {\n      background-color: @syntax-color-renamed;\n    }\n    &.last {\n      background-color: @syntax-color-removed;\n    }\n  }\n}\n```\n\n# Language specific `wordRegExp` configuration.\n\nYou can specify `wordRegExp` configuration per language.  \n\nSee [Scoped Settings, Scopes and Scope Descriptors](https://atom.io/docs/latest/behind-atom-scoped-settings-scopes-and-scope-descriptors) and [API/Config](https://atom.io/docs/api/latest/Config) for details.\n\n- in your `config.cson`.\n\n```coffeescript\n\"*\": # This is global scope. Used as default.\n  # <snip>\n  \"lazy-motion\":\n    wordRegExp: 'xxxx'\n  # <snip>\n\".go.source\": # This is Go specific,\n  \"lazy-motion\":\n    wordRegExp: 'xxxx'\n```\n\n# Credits\n\n* This package was originally created by @t9md.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jrajav/atom-lazy-motion.git"
  },
  "version": "0.7.0"
}
