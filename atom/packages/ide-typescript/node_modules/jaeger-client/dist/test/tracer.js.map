{"version":3,"sources":["../../test/tracer.js"],"names":["constants","opentracing","describe","tracer","reporter","beforeEach","afterEach","clear","close","it","headers","TRACER_BAGGAGE_HEADER_PREFIX","JAEGER_BAGGAGE_HEADER","spanContext","extract","FORMAT_TEXT_MAP","rootSpan","startSpan","childOf","isOk","context","traceId","isNotOk","parentId","equal","flags","getBaggageItem","encodeInt64","spanId","withBinaryIds","start","rpcServer","internalTags","references","tags","keyOne","keyTwo","span","_startInternalSpan","deepEqual","_startTime","Object","keys","_tags","length","_report","spans","actualTags","sortBy","o","key","value","startTime","Date","getTime","isSampled","childOfParams","operationName","referenceParams","Reference","REFERENCE_CHILD_OF","assertByStartSpanParameters","params","SAMPLED_MASK","baggage","savedContext","assertByFormat","carrier","inject","format","extractedContext","FORMAT_HTTP_HEADERS","to","throw","sampled","metrics","each","fromString","Tags","SPAN_KIND","SPAN_KIND_RPC_SERVER","counterEquals","metricName","spansFinished"],"mappings":"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","file":"tracer.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert, expect } from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport * as constants from '../src/constants.js';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport * as opentracing from 'opentracing';\nimport { Tags as opentracing_tags } from 'opentracing';\nimport SpanContext from '../src/span_context.js';\nimport Tracer from '../src/tracer.js';\nimport Utils from '../src/util.js';\nimport Metrics from '../src/metrics/metrics.js';\nimport LocalMetricFactory from './lib/metrics/local/metric_factory.js';\nimport LocalBackend from './lib/metrics/local/backend.js';\n\ndescribe('tracer should', () => {\n  let tracer;\n  let reporter = new InMemoryReporter();\n\n  beforeEach(() => {\n    tracer = new Tracer('test-service-name', reporter, new ConstSampler(true));\n  });\n\n  afterEach(() => {\n    reporter.clear();\n    tracer.close();\n  });\n\n  it('begin a new span given only baggage headers', () => {\n    // Users sometimes want to pass baggage even if there is no span.\n    // In this case we must ensure a new root span is created.\n    let headers = {};\n    // combine normal baggage encoding\n    headers[constants.TRACER_BAGGAGE_HEADER_PREFIX + 'robot'] = 'Bender';\n    // with custom encoding via `jaeger-baggage` header\n    headers[constants.JAEGER_BAGGAGE_HEADER] = 'male=Fry, female=Leela, Lord Nibbler';\n    let spanContext = tracer.extract(opentracing.FORMAT_TEXT_MAP, headers);\n    let rootSpan = tracer.startSpan('fry', { childOf: spanContext });\n\n    assert.isOk(rootSpan.context().traceId);\n    assert.isNotOk(rootSpan.context().parentId);\n    assert.equal(rootSpan.context().flags, 1);\n    assert.equal('Bender', rootSpan.getBaggageItem('robot'));\n    assert.equal('Leela', rootSpan.getBaggageItem('female'));\n    assert.equal('Fry', rootSpan.getBaggageItem('male'));\n  });\n\n  it('create a span correctly through _startInternalSpan', () => {\n    let traceId = Utils.encodeInt64(1);\n    let spanId = Utils.encodeInt64(2);\n    let parentId = Utils.encodeInt64(3);\n    let flags = 1;\n    let context = SpanContext.withBinaryIds(traceId, spanId, parentId, flags);\n    let start = 123.456;\n    let rpcServer = false;\n    let internalTags = [];\n    let references = [];\n    let tags = {\n      keyOne: 'leela',\n      keyTwo: 'bender',\n    };\n    let span = tracer._startInternalSpan(\n      context,\n      'op-name',\n      start,\n      internalTags,\n      tags,\n      null,\n      rpcServer,\n      references\n    );\n\n    assert.deepEqual(span.context().traceId, traceId);\n    assert.deepEqual(span.context().spanId, spanId);\n    assert.deepEqual(span.context().parentId, parentId);\n    assert.equal(span.context().flags, flags);\n    assert.equal(span._startTime, start);\n    assert.equal(Object.keys(span._tags).length, 2);\n  });\n\n  it('report a span with no tracer level tags', () => {\n    let span = tracer.startSpan('op-name');\n    tracer._report(span);\n    assert.isOk(reporter.spans.length, 1);\n    let actualTags = _.sortBy(span._tags, o => {\n      return o.key;\n    });\n\n    assert.equal(2, actualTags.length);\n    assert.equal(actualTags[0].key, 'sampler.param');\n    assert.equal(actualTags[1].key, 'sampler.type');\n    assert.equal(actualTags[0].value, true);\n    assert.equal(actualTags[1].value, 'const');\n  });\n\n  it('start a root span with proper structure', () => {\n    let startTime = new Date(2016, 8, 18).getTime();\n    let span = tracer.startSpan('test-name', {\n      startTime: startTime,\n    });\n\n    assert.equal(span.context().traceId, span.context().spanId);\n    assert.isNotOk(span.context().parentId);\n    assert.isOk(span.context().isSampled());\n    assert.equal(span._startTime, startTime);\n  });\n\n  it('start a child span represented as a separate span from parent, using childOf and references', () => {\n    let traceId = Utils.encodeInt64(1);\n    let spanId = Utils.encodeInt64(2);\n    let parentId = Utils.encodeInt64(3);\n    let flags = 1;\n    let context = SpanContext.withBinaryIds(traceId, spanId, parentId, flags);\n    let startTime = 123.456;\n\n    let childOfParams = {\n      operationName: 'test-name',\n      childOf: context,\n      startTime: startTime,\n    };\n\n    let referenceParams = {\n      operationName: 'test-name',\n      startTime: startTime,\n      references: [new opentracing.Reference(opentracing.REFERENCE_CHILD_OF, context)],\n    };\n\n    let assertByStartSpanParameters = params => {\n      let span = tracer.startSpan('test-span', params);\n      assert.deepEqual(span.context().traceId, traceId);\n      assert.deepEqual(span.context().parentId, spanId);\n      assert.equal(span.context().flags, constants.SAMPLED_MASK);\n      assert.equal(span._startTime, startTime);\n    };\n\n    assertByStartSpanParameters(childOfParams);\n    assertByStartSpanParameters(referenceParams);\n  });\n\n  it('inject plain text headers into carrier, and extract span context with the same value', () => {\n    let keyOne = 'keyOne';\n    let keyTwo = 'keyTwo';\n    let baggage = {\n      keyOne: 'leela',\n      keyTwo: 'bender',\n    };\n    let savedContext = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      constants.SAMPLED_MASK,\n      baggage\n    );\n\n    let assertByFormat = format => {\n      let carrier = {};\n      tracer.inject(savedContext, format, carrier);\n      let extractedContext = tracer.extract(format, carrier);\n\n      assert.deepEqual(savedContext.traceId, extractedContext.traceId);\n      assert.deepEqual(savedContext.spanId, extractedContext.spanId);\n      assert.deepEqual(savedContext.parentId, extractedContext.parentId);\n      assert.equal(savedContext.flags, extractedContext.flags);\n      assert.equal(savedContext.baggage[keyOne], extractedContext.baggage[keyOne]);\n      assert.equal(savedContext.baggage[keyTwo], extractedContext.baggage[keyTwo]);\n    };\n\n    assertByFormat(opentracing.FORMAT_TEXT_MAP);\n    assertByFormat(opentracing.FORMAT_HTTP_HEADERS);\n  });\n\n  it('inject url encoded values into headers', () => {\n    let baggage = {\n      keyOne: 'Leela vs. Bender',\n    };\n    let savedContext = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      constants.SAMPLED_MASK,\n      baggage\n    );\n    let carrier = {};\n\n    tracer.inject(savedContext, opentracing.FORMAT_HTTP_HEADERS, carrier);\n    assert.equal(carrier['uberctx-keyOne'], 'Leela%20vs.%20Bender');\n  });\n\n  it('assert inject and extract throw errors when given an invalid format', () => {\n    let carrier = {};\n    let context = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      constants.SAMPLED_MASK\n    );\n\n    // subtle but expect wants a function to call not the result of a function call.\n    expect(() => {\n      tracer.inject(context, 'fake-format', carrier);\n    }).to.throw('Unsupported format: fake-format');\n    expect(() => {\n      tracer.extract('fake-format', carrier);\n    }).to.throw('Unsupported format: fake-format');\n  });\n\n  it('report spans', () => {\n    let span = tracer.startSpan('operation');\n    tracer._report(span);\n\n    assert.equal(reporter.spans.length, 1);\n  });\n\n  describe('Metrics', () => {\n    it('startSpan', () => {\n      let params = [\n        {\n          rpcServer: false,\n          context: null,\n          sampled: true,\n          metrics: ['spansStarted', 'spansSampled', 'tracesStartedSampled'],\n        },\n        {\n          rpcServer: true,\n          context: '1:2:100:1',\n          sampled: true,\n          metrics: ['spansStarted', 'spansSampled', 'tracesJoinedSampled'],\n        },\n        {\n          rpcServer: false,\n          context: null,\n          sampled: false,\n          metrics: ['spansStarted', 'spansNotSampled', 'tracesStartedNotSampled'],\n        },\n        {\n          rpcServer: true,\n          context: '1:2:100:0',\n          sampled: false,\n          metrics: ['spansStarted', 'spansNotSampled', 'tracesJoinedNotSampled'],\n        },\n      ];\n\n      _.each(params, o => {\n        let metrics = new Metrics(new LocalMetricFactory());\n        tracer = new Tracer('fry', new InMemoryReporter(), new ConstSampler(o.sampled), {\n          metrics: metrics,\n        });\n\n        let context = null;\n        if (o.context) {\n          context = SpanContext.fromString(o.context);\n        }\n\n        let tags = {};\n        if (o.rpcServer) {\n          tags[opentracing.Tags.SPAN_KIND] = opentracing.Tags.SPAN_KIND_RPC_SERVER;\n        }\n\n        tracer.startSpan('bender', {\n          childOf: context,\n          tags: tags,\n        });\n\n        _.each(o.metrics, metricName => {\n          assert.isOk(LocalBackend.counterEquals(metrics[metricName], 1));\n        });\n      });\n    });\n\n    it('emits counter when report called', () => {\n      let metrics = new Metrics(new LocalMetricFactory());\n      tracer = new Tracer('fry', new InMemoryReporter(), new ConstSampler(true), {\n        metrics: metrics,\n      });\n      let span = tracer.startSpan('bender');\n      tracer._report(span);\n\n      assert.isOk(LocalBackend.counterEquals(metrics.spansFinished, 1));\n    });\n  });\n});\n"]}