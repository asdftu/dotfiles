# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.js':
  'React Native Component':
    'prefix': 'rncmp'
    'body': """
      // @flow

      import { StyleSheet, View } from 'react-native'
      import React from 'react'

      export class $1 extends React.Component {
        render() {
          return <View />
        }
      }

      const styles = StyleSheet.create({})
    """
  'Redux Reducer':
    'prefix': 'rdcer'
    'body': """
      // @flow

      export const $1 = (state: $2 = $3, action: $4): $2 => {
        switch (action.type) {
          default:
            return state;
        }
      }
    """
  'Preact Component':
    'prefix': 'prcmp'
    'body': """
      import { h, Component } from 'preact'

      export class $1 extends Component {
        render() {
          return <div />;
        }
      }
    """
  'Mocha test':
    'prefix': 'moc'
    'body': """
      'use strict'

      const sinon = require('sinon');
      const chai = require('chai');
      const expect = chai.expect;

      describe('$1', function() {

      });
    """
